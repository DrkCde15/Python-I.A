# food_analyser.py
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.tools import BaseTool
from langchain_core.messages import SystemMessage, HumanMessage
from PIL import Image
import base64
import os
from io import BytesIO
from pydantic import PrivateAttr
import traceback
from datetime import datetime

class FoodAnalyser(BaseTool):
    name: str = "food_analyser"
    description: str = """Analisa imagens de refei√ß√µes fornecendo informa√ß√µes nutricionais detalhadas e 
    sugest√µes de uma nutricionista especializada em nutri√ß√£o esportiva."""

    _llm: ChatGoogleGenerativeAI = PrivateAttr()

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self._llm = ChatGoogleGenerativeAI(
            model='gemini-2.5-flash',
            temperature=0.7,
            max_tokens=2048
        )

    # ----------------- Implementa√ß√£o obrigat√≥ria BaseTool -----------------
    def _run(self, image_path: str) -> str:
        """An√°lise s√≠ncrona do BaseTool"""
        return self._analyze_image(image_path)

    async def _arun(self, image_path: str) -> str:
        """An√°lise ass√≠ncrona do BaseTool"""
        return self._analyze_image(image_path)

    # ----------------- Fun√ß√µes auxiliares -----------------
    def _get_timestamp(self) -> str:
        return datetime.now().isoformat()

    def _validate_image_path(self, image_path: str) -> bool:
        if not os.path.exists(image_path):
            raise FileNotFoundError(f"Arquivo n√£o encontrado: {image_path}")
        valid_extensions = {'.jpg', '.jpeg', '.png', '.webp', '.bmp', '.gif'}
        _, ext = os.path.splitext(image_path.lower())
        if ext not in valid_extensions:
            raise ValueError(f"Formato de imagem n√£o suportado: {ext}")
        return True

    def _process_image(self, image_path: str) -> str:
        self._validate_image_path(image_path)
        with Image.open(image_path) as image:
            if image.mode in ('RGBA', 'LA'):
                background = Image.new('RGB', image.size, (255, 255, 255))
                background.paste(image, mask=image.split()[-1] if image.mode == 'RGBA' else None)
                image = background
            elif image.mode != 'RGB':
                image = image.convert('RGB')

            max_size = (1024, 1024)
            if image.size[0] > max_size[0] or image.size[1] > max_size[1]:
                image.thumbnail(max_size, Image.Resampling.LANCZOS)

            buffered = BytesIO()
            image.save(buffered, format="JPEG", quality=85, optimize=True)
            return base64.b64encode(buffered.getvalue()).decode("utf-8")

    def _create_analysis_prompt(self) -> str:
        return '''
Voc√™ √© uma nutricionista especializada em nutri√ß√£o esportiva. Analise a imagem da refei√ß√£o e forne√ßa
uma tabela nutricional em Markdown seguindo este formato:

| Nutriente | Quantidade | % VD* |
|-----------|------------|-------|
| Calorias | ... | ... |
| Carboidratos | ... | ... |
| Prote√≠nas | ... | ... |
| Gorduras Totais | ... | ... |
| Gorduras Saturadas | ... | ... |
| Fibras | ... | ... |
| S√≥dio | ... | ... |

*VD = Valores Di√°rios de refer√™ncia baseados em uma dieta de 2.000 kcal

Ap√≥s a tabela, inclua:
1. **Avalia√ß√£o Geral**: Qualidade nutricional da refei√ß√£o (Excelente/Boa/Regular/Precisa melhorar)
2. **Pontos Positivos**: O que est√° bom na refei√ß√£o
3. **Sugest√µes de Melhoria**: 2-3 dicas pr√°ticas e objetivas

Seja clara, objetiva e use linguagem acess√≠vel.
'''

    def _extract_content_from_response(self, response) -> str:
        """Extrai o conte√∫do de texto do objeto AIMessage de forma robusta"""
        try:
            # M√©todo 1: Atributo content (mais comum)
            if hasattr(response, 'content') and response.content:
                if isinstance(response.content, str):
                    return response.content
                elif isinstance(response.content, list):
                    # √Äs vezes o content √© uma lista de dicts
                    text_parts = []
                    for item in response.content:
                        if isinstance(item, dict) and 'text' in item:
                            text_parts.append(item['text'])
                        elif isinstance(item, str):
                            text_parts.append(item)
                    if text_parts:
                        return ' '.join(text_parts)
            
            # M√©todo 2: Convers√£o direta para string
            if hasattr(response, '__str__'):
                content_str = str(response)
                # Remove metadados se presentes
                if 'content=' in content_str:
                    # Extrai apenas o conte√∫do √∫til
                    start = content_str.find("content='") + 9
                    end = content_str.find("', additional_kwargs")
                    if start > 8 and end > start:
                        return content_str[start:end]
            
            # M√©todo 3: Tentar acessar diretamente como dict
            if isinstance(response, dict) and 'content' in response:
                return str(response['content'])
            
            # Se tudo falhar, retorna representa√ß√£o em string
            return str(response)
            
        except Exception as e:
            print(f"Erro ao extrair conte√∫do: {e}")
            return f"Erro ao processar resposta: {str(e)}"

    def _analyze_image(self, image_path: str) -> str:
        """An√°lise completa retornando apenas a tabela + dicas"""
        try:
            img_b64 = self._process_image(image_path)

            system_message = SystemMessage(content=self._create_analysis_prompt())
            human_message = HumanMessage(content=[
                {'type': 'text', 'text': 'Analise esta imagem de refei√ß√£o e retorne a tabela nutricional completa com avalia√ß√£o e dicas:'},
                {'type': 'image_url', 'image_url': {'url': f"data:image/jpeg;base64,{img_b64}", 'detail': 'high'}}
            ])

            # Invoca o modelo
            response = self._llm.invoke([system_message, human_message])
            
            # Extrai o conte√∫do de forma robusta
            tabela_texto = self._extract_content_from_response(response)
            
            # Verifica se conseguiu extrair conte√∫do v√°lido
            if not tabela_texto or len(tabela_texto) < 50:
                return f"Erro: Resposta vazia ou inv√°lida do modelo. Resposta recebida: {str(response)[:200]}"
            
            # Formata o resultado final
            result_text = f"""AN√ÅLISE NUTRICIONAL DA REFEI√á√ÉO
_Imagem: {os.path.basename(image_path)}_

{tabela_texto}

---
üí° **Dica da Nutricionista**: Para an√°lises mais precisas, inclua informa√ß√µes sobre suas caracter√≠sticas (peso, altura, objetivos) e n√≠vel de atividade f√≠sica!"""

            return result_text

        except Exception as e:
            error_details = traceback.format_exc()
            print(f"Erro completo na an√°lise:\n{error_details}")
            return f"""N√£o foi poss√≠vel analisar a imagem.

**Erro t√©cnico**: {str(e)}

**Poss√≠veis causas**:
- Formato de imagem n√£o suportado
- Arquivo corrompido ou muito grande

**Sugest√µes**:
1. Verifique se a imagem est√° em formato v√°lido (JPG, PNG, WEBP)
2. Tente com uma imagem menor (< 5MB)"""

    # ----------------- Interface p√∫blica -----------------
    def analyze_food_image(self, image_path: str) -> str:
        return self._analyze_image(image_path)

    def get_supported_formats(self) -> list:
        return ['.jpg', '.jpeg', '.png', '.webp', '.bmp', '.gif']


# ----------------- Batch processing -----------------
class BatchFoodAnalyser:
    """Classe para analisar m√∫ltiplas imagens"""

    def __init__(self):
        self.analyser = FoodAnalyser()

    def analyze_multiple_images(self, image_paths: list) -> list:
        """Analisa m√∫ltiplas imagens e retorna lista de resultados (tabela + dicas)"""
        results = []
        for i, path in enumerate(image_paths, 1):
            print(f"Analisando imagem {i}/{len(image_paths)}: {os.path.basename(path)}")
            result = self.analyser.analyze_food_image(path)
            results.append({
                'path': path,
                'filename': os.path.basename(path),
                'analysis': result
            })
        return results

    def create_summary_report(self, results: list) -> str:
        """Cria relat√≥rio final com todas as tabelas em sequ√™ncia"""
        report = f"""# üìä RELAT√ìRIO DE AN√ÅLISES NUTRICIONAIS

**Total de imagens analisadas**: {len(results)}
**Data**: {datetime.now().strftime('%d/%m/%Y %H:%M')}

---

"""
        for i, result in enumerate(results, 1):
            analysis = result['analysis'] if isinstance(result, dict) else result
            filename = result.get('filename', f'Imagem {i}') if isinstance(result, dict) else f'Imagem {i}'
            
            report += f"""## {i}. {filename}

{analysis}

---

"""
        
        report += "\n\n**Observa√ß√£o Final**: Este relat√≥rio √© baseado em estimativas visuais e n√£o substitui a consulta com um nutricionista profissional."
        
        return report